{
    "https://github.com/pre-commit/pre-commit-hooks": [
        {
            "id": "autopep8-wrapper",
            "name": "autopep8 wrapper",
            "description": "Runs autopep8 over python source.  If you configure additional arguments you'll want to at least include -i.",
            "entry": "autopep8-wrapper",
            "language": "python",
            "types": [
                "python"
            ],
            "args": [
                "-i"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-added-large-files",
            "name": "Check for added large files",
            "description": "Prevent giant files from being committed",
            "entry": "check-added-large-files",
            "language": "python",
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-ast",
            "name": "Check python ast",
            "description": "Simply check whether the files parse as valid python.",
            "entry": "check-ast",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-byte-order-marker",
            "name": "Check for byte-order marker",
            "description": "Forbid files which have a UTF-8 byte-order marker",
            "entry": "check-byte-order-marker",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-builtin-literals",
            "name": "Check builtin type constructor use",
            "description": "Require literal syntax when initializing empty or zero Python builtin types.",
            "entry": "check-builtin-literals",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-case-conflict",
            "name": "Check for case conflicts",
            "description": "Check for files that would conflict in case-insensitive filesystems",
            "entry": "check-case-conflict",
            "language": "python",
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-docstring-first",
            "name": "Check docstring is first",
            "description": "Checks a common error of defining a docstring after code.",
            "entry": "check-docstring-first",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-executables-have-shebangs",
            "name": "Check that executables have shebangs",
            "description": "Ensures that (non-binary) executables have a shebang.",
            "entry": "check-executables-have-shebangs",
            "language": "python",
            "types": [
                "text",
                "executable"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-json",
            "name": "Check JSON",
            "description": "This hook checks json files for parseable syntax.",
            "entry": "check-json",
            "language": "python",
            "types": [
                "json"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "pretty-format-json",
            "name": "Pretty format JSON",
            "description": "This hook sets a standard for formatting JSON files.",
            "entry": "pretty-format-json",
            "language": "python",
            "types": [
                "json"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-merge-conflict",
            "name": "Check for merge conflicts",
            "description": "Check for files that contain merge conflict strings.",
            "entry": "check-merge-conflict",
            "language": "python",
            "types": [
                "text"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-symlinks",
            "name": "Check for broken symlinks",
            "description": "Checks for symlinks which do not point to anything.",
            "entry": "check-symlinks",
            "language": "python",
            "types": [
                "symlink"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-vcs-permalinks",
            "name": "Check vcs permalinks",
            "description": "Ensures that links to vcs websites are permalinks.",
            "entry": "check-vcs-permalinks",
            "language": "python",
            "types": [
                "text"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-xml",
            "name": "Check Xml",
            "description": "This hook checks xml files for parseable syntax.",
            "entry": "check-xml",
            "language": "python",
            "types": [
                "xml"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "check-yaml",
            "name": "Check Yaml",
            "description": "This hook checks yaml files for parseable syntax.",
            "entry": "check-yaml",
            "language": "python",
            "types": [
                "yaml"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "debug-statements",
            "name": "Debug Statements (Python)",
            "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source.",
            "entry": "debug-statement-hook",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "detect-aws-credentials",
            "name": "Detect AWS Credentials",
            "description": "Detects *your* aws credentials from the aws cli credentials file",
            "entry": "detect-aws-credentials",
            "language": "python",
            "types": [
                "text"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "detect-private-key",
            "name": "Detect Private Key",
            "description": "Detects the presence of private keys",
            "entry": "detect-private-key",
            "language": "python",
            "types": [
                "text"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "double-quote-string-fixer",
            "name": "Fix double quoted strings",
            "description": "This hook replaces double quoted strings with single quoted strings",
            "entry": "double-quote-string-fixer",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "end-of-file-fixer",
            "name": "Fix End of Files",
            "description": "Ensures that a file is either empty, or ends with one newline.",
            "entry": "end-of-file-fixer",
            "language": "python",
            "types": [
                "text"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "file-contents-sorter",
            "name": "File Contents Sorter",
            "description": "Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input in your .pre-commit-config.yaml file.",
            "entry": "file-contents-sorter",
            "language": "python",
            "files": "^$"
        },
        {
            "id": "fix-encoding-pragma",
            "name": "Fix python encoding pragma",
            "language": "python",
            "entry": "fix-encoding-pragma",
            "description": "Add # -*- coding: utf-8 -*- to the top of python files",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "flake8",
            "name": "Flake8",
            "description": "This hook runs flake8.",
            "entry": "flake8",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "forbid-new-submodules",
            "name": "Forbid new submodules",
            "language": "python",
            "entry": "forbid-new-submodules",
            "description": "Prevent addition of new git submodules",
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "mixed-line-ending",
            "name": "Mixed line ending",
            "description": "Replaces or checks mixed line ending",
            "entry": "mixed-line-ending",
            "language": "python",
            "types": [
                "text"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "name-tests-test",
            "name": "Tests should end in _test.py",
            "description": "This verifies that test files are named correctly",
            "entry": "name-tests-test",
            "language": "python",
            "files": "(^|/)tests/.+\\.py$"
        },
        {
            "id": "no-commit-to-branch",
            "name": "Don't commit to branch",
            "entry": "no-commit-to-branch",
            "language": "python",
            "pass_filenames": false,
            "always_run": true,
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "pyflakes",
            "name": "Pyflakes (DEPRECATED, use flake8)",
            "description": "This hook runs pyflakes. (This is deprecated, use flake8).",
            "entry": "pyflakes",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "requirements-txt-fixer",
            "name": "Fix requirements.txt",
            "description": "Sorts entries in requirements.txt",
            "entry": "requirements-txt-fixer",
            "language": "python",
            "files": "requirements.*\\.txt$"
        },
        {
            "id": "sort-simple-yaml",
            "name": "Sort simple YAML files",
            "language": "python",
            "entry": "sort-simple-yaml",
            "description": "Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.",
            "files": "^$"
        },
        {
            "id": "trailing-whitespace",
            "name": "Trim Trailing Whitespace",
            "description": "This hook trims trailing whitespace.",
            "entry": "trailing-whitespace-fixer",
            "language": "python",
            "types": [
                "text"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-autopep8": [
        {
            "id": "autopep8",
            "name": "autopep8",
            "entry": "autopep8",
            "language": "python",
            "files": "\\.py$",
            "args": [
                "-i"
            ]
        }
    ],
    "https://github.com/pre-commit/mirrors-coffeelint": [
        {
            "id": "coffeelint",
            "name": "coffeelint",
            "entry": "coffeelint",
            "language": "node",
            "files": "\\.(js|coffee)$",
            "args": [],
            "additional_dependencies": [
                "coffeelint@2.1.0"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-csslint": [
        {
            "id": "csslint",
            "name": "csslint",
            "entry": "csslint",
            "language": "node",
            "files": "\\.css$",
            "args": [],
            "additional_dependencies": [
                "csslint@1.0.5"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-eslint": [
        {
            "id": "eslint",
            "name": "eslint",
            "entry": "eslint",
            "language": "node",
            "types": [
                "javascript"
            ],
            "args": [],
            "additional_dependencies": [
                "eslint@5.0.0-rc.0"
            ]
        }
    ],
    "https://github.com/pre-commit/mirrors-fixmyjs": [
        {
            "id": "fixmyjs",
            "name": "fixmyjs",
            "entry": "fixmyjs",
            "language": "node",
            "files": "\\.js$",
            "args": [],
            "additional_dependencies": [
                "fixmyjs@2.0.0"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-isort": [
        {
            "id": "isort",
            "name": "isort",
            "entry": "isort",
            "language": "python",
            "files": "\\.py$",
            "args": []
        }
    ],
    "https://github.com/pre-commit/mirrors-jshint": [
        {
            "id": "jshint",
            "name": "jshint",
            "entry": "jshint",
            "language": "node",
            "files": "\\.js$",
            "args": [],
            "additional_dependencies": [
                "jshint@2.9.5"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-puppet-lint": [
        {
            "id": "puppet-lint",
            "name": "puppet-lint",
            "entry": "puppet-lint",
            "language": "ruby",
            "files": "\\.pp$",
            "args": []
        }
    ],
    "https://github.com/pre-commit/mirrors-pylint": [
        {
            "id": "pylint",
            "name": "pylint",
            "entry": "pylint",
            "language": "python",
            "types": [
                "python"
            ],
            "args": [],
            "additional_dependencies": []
        }
    ],
    "https://github.com/pre-commit/mirrors-ruby-lint": [
        {
            "id": "ruby-lint",
            "name": "ruby-lint",
            "entry": "ruby-lint",
            "language": "ruby",
            "files": "\\.rb$",
            "args": []
        }
    ],
    "https://github.com/pre-commit/mirrors-scss-lint": [
        {
            "id": "scss-lint",
            "name": "scss_lint",
            "entry": "scss-lint",
            "language": "ruby",
            "files": "\\.scss$",
            "args": []
        }
    ],
    "https://github.com/pre-commit/mirrors-yapf": [
        {
            "id": "yapf",
            "name": "yapf",
            "entry": "yapf",
            "language": "python",
            "files": "\\.py$",
            "args": [
                "-i"
            ]
        }
    ],
    "https://github.com/FalconSocial/pre-commit-mirrors-pep257": [
        {
            "id": "pep257",
            "name": "pep257",
            "entry": "pep257",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/FalconSocial/pre-commit-python-sorter": [
        {
            "id": "python-import-sorter",
            "name": "Sort python imports",
            "description": "This hook sorts python imports.",
            "entry": "python-import-sorter",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/guykisel/prospector-mirror": [
        {
            "id": "prospector",
            "name": "prospector",
            "description": "This hook runs Prospector: https://github.com/landscapeio/prospector",
            "entry": "prospector",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/asottile/add-trailing-comma": [
        {
            "id": "add-trailing-comma",
            "name": "Add trailing commas",
            "description": "Automatically add trailing commas to calls and literals.",
            "entry": "add-trailing-comma",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/asottile/pyupgrade": [
        {
            "id": "pyupgrade",
            "name": "pyupgrade",
            "description": "Automatically upgrade syntax for newer versions.",
            "entry": "pyupgrade",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/asottile/reorder_python_imports": [
        {
            "id": "reorder-python-imports",
            "name": "Reorder python imports",
            "description": "This hook reorders imports in python files.",
            "entry": "reorder-python-imports",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/asottile/yesqa": [
        {
            "id": "yesqa",
            "name": "Strip unnecessary `# noqa`s",
            "description": "Automatically remove unnecessary `# noqa` comments",
            "entry": "yesqa",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/asottile/seed-isort-config": [
        {
            "id": "seed-isort-config",
            "name": "seed isort known_third_party",
            "description": "Statically populate the `known_third_party` `isort` setting.",
            "entry": "seed-isort-config",
            "language": "python",
            "always_run": true,
            "pass_filenames": false,
            "minimum_pre_commit_version": "0.14.0"
        }
    ],
    "https://github.com/asottile/blacken-docs": [
        {
            "id": "blacken-docs",
            "name": "blacken-docs",
            "description": "Run `black` on python code blocks in documentation files",
            "entry": "blacken-docs",
            "language": "python",
            "language_version": "python3.6",
            "files": "\\.(rst|md|markdown)"
        }
    ],
    "https://github.com/asottile/cheetah_lint": [
        {
            "id": "cheetah-reorder-imports",
            "name": "Reorder cheetah imports",
            "description": "This hook reorders imports in cheetah files.",
            "entry": "cheetah-reorder-imports",
            "language": "python",
            "files": "\\.tmpl$"
        },
        {
            "id": "cheetah-flake",
            "name": "Cheetah flake",
            "description": "Lint cheetah code using flake8 and some other checks.",
            "entry": "cheetah-flake",
            "language": "python",
            "files": "\\.tmpl$"
        }
    ],
    "https://github.com/digitalpulp/pre-commit-php": [
        {
            "id": "php-lint-all",
            "name": "PHP Syntax Check (Comprehensive)",
            "description": "Check PHP Syntax on ALL PHP staged files with user friendly messages and colors",
            "entry": "pre_commit_hooks/php-lint.sh",
            "language": "script",
            "files": "\\.php$",
            "args": [
                "-s all"
            ]
        },
        {
            "id": "php-lint",
            "name": "PHP Syntax Check (Quick)",
            "description": "Runs php -l on all staged files. Exits when it hits the first errored file",
            "entry": "php -l",
            "language": "system",
            "files": "\\.php$"
        },
        {
            "id": "php-unit",
            "name": "PHP Unit",
            "description": "Run the full php unit test. Checks which PHPUnit executable is available first and then runs it. Preference order is vendor/bin, phpunit and phpunit.phar.",
            "entry": "pre_commit_hooks/php-unit.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cs",
            "name": "PHP Codesniffer",
            "description": "Run php codesniffer against all staged files.",
            "entry": "pre_commit_hooks/php-cs.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cbf",
            "name": "PHP Codesniffer (Code Beutifier and Formatter)",
            "description": "Run php codesniffer against all staged files.",
            "entry": "pre_commit_hooks/php-cbf.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cs-fixer",
            "name": "PHP Coding Standards Fixer",
            "description": "Run php coding standards fixer against all staged files.",
            "entry": "pre_commit_hooks/php-cs-fixer.sh",
            "language": "script",
            "files": "\\.php$"
        }
    ],
    "https://github.com/elidupuis/mirrors-jscs": [
        {
            "id": "jscs",
            "name": "jscs",
            "entry": "jscs",
            "language": "node",
            "files": "\\.js$",
            "args": [],
            "additional_dependencies": [
                "jscs@3.0.7"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/elidupuis/mirrors-sass-lint": [
        {
            "id": "sass-lint",
            "name": "sass-lint",
            "entry": "sass-lint",
            "language": "node",
            "files": "\\.(scss|sass)$",
            "args": [],
            "additional_dependencies": [
                "sass-lint@1.12.0"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/jumanjihouse/pre-commit-hooks": [
        {
            "id": "fasterer",
            "name": "Suggest speed improvements in Ruby",
            "description": "Use fasterer to suggest speed improvements in Ruby",
            "entry": "run-fasterer",
            "language": "ruby",
            "types": [
                "ruby"
            ]
        },
        {
            "id": "forbid-binary",
            "name": "Forbid binaries",
            "description": "Forbid binary files from being committed",
            "entry": "pre_commit_hooks/forbid-binary.sh",
            "language": "script",
            "types": [
                "binary"
            ]
        },
        {
            "id": "forbid-space-in-indent",
            "name": "Forbid spaces in indentation",
            "description": "Forbid spaces in indentation",
            "entry": "pre_commit_hooks/forbid-space-in-indent.sh",
            "language": "script"
        },
        {
            "id": "git-check",
            "name": "Check for conflict markers and core.whitespace errors",
            "description": "Use git to check for conflict markers and core.whitespace errors, respecting .gitattributes",
            "entry": "pre_commit_hooks/git-check.sh",
            "language": "script"
        },
        {
            "id": "git-dirty",
            "name": "Check if the git tree is dirty",
            "description": "Detect if git tree contains modified, staged, or untracked files",
            "entry": "pre_commit_hooks/git-dirty.sh",
            "language": "script"
        },
        {
            "id": "reek",
            "name": "Find ruby code smells",
            "description": "Use reek to find ruby code smells",
            "entry": "run-reek",
            "language": "ruby",
            "types": [
                "ruby"
            ]
        },
        {
            "id": "rubocop",
            "name": "Check Ruby style with rubocop and rubocop-rspec",
            "description": "Enforce Ruby style guide with rubocop and rubocop-rspec",
            "entry": "run-rubocop",
            "language": "ruby",
            "types": [
                "ruby"
            ]
        },
        {
            "id": "shellcheck",
            "name": "Test shell scripts with shellcheck",
            "description": "Shell scripts conform to shellcheck",
            "entry": "pre_commit_hooks/shellcheck.sh",
            "language": "script",
            "types": [
                "shell"
            ],
            "args": [
                "-e",
                "SC1091"
            ],
            "additional_dependencies": [
                "shellcheck"
            ]
        },
        {
            "id": "shfmt",
            "name": "Check shell style with shfmt",
            "language": "script",
            "entry": "pre_commit_hooks/shfmt.sh",
            "types": [
                "shell"
            ],
            "args": [
                "-l",
                "-i",
                "2",
                "-ci"
            ],
            "additional_dependencies": [
                "shfmt"
            ]
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks": [
        {
            "id": "forbid-crlf",
            "name": "CRLF end-lines checker",
            "description": "Forbid files containing CRLF end-lines to be committed",
            "entry": "forbid_crlf",
            "language": "python",
            "files": ""
        },
        {
            "id": "remove-crlf",
            "name": "CRLF end-lines remover",
            "description": "Replace CRLF end-lines by LF ones before committing",
            "entry": "remove_crlf",
            "language": "python",
            "files": ""
        },
        {
            "id": "forbid-tabs",
            "name": "No-tabs checker",
            "description": "Forbid files containing tabs to be committed",
            "entry": "forbid_tabs",
            "language": "python",
            "files": "",
            "exclude": "(Makefile|debian/rules)(\\.in)?$"
        },
        {
            "id": "remove-tabs",
            "name": "Tabs remover",
            "description": "Replace tabs by whitespaces before committing",
            "entry": "remove_tabs",
            "language": "python",
            "args": [
                "--whitespaces-count",
                "4"
            ],
            "files": "",
            "exclude": "(Makefile|debian/rules)(\\.in)?$"
        },
        {
            "id": "insert-license",
            "name": "Insert license in comments",
            "description": "Insert a short license disclaimer as a header comment in source files",
            "entry": "insert_license",
            "language": "python",
            "files": ".*/.*"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-bandit": [
        {
            "id": "python-bandit-vulnerability-check",
            "name": "bandit",
            "description": "Python code vulnerabilities checker",
            "language": "python",
            "entry": "bandit_analyzer",
            "args": [
                "-lll",
                "--recursive",
                "."
            ],
            "files": ""
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-go": [
        {
            "id": "checkmake",
            "name": "Makefile linter/analyzer",
            "entry": "checkmake",
            "language": "golang",
            "additional_dependencies": [
                "github.com/mrtazz/checkmake"
            ],
            "files": "Makefile"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-java": [
        {
            "id": "validate-html",
            "name": "HTML syntax validator using W3C v.Nu checker, with support for handlebars/jinja2 templates",
            "entry": "validate_html",
            "language": "python",
            "files": ".*\\.(html|hbs)$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-lxml": [
        {
            "id": "forbid-html-img-without-alt-text",
            "name": "HTML img tag alt text checker",
            "description": "List every <img> tag without a alt= or data-ng-attr-alt= attribute",
            "entry": "forbid_html_img_without_alt_text",
            "language": "python",
            "files": ".*\\.(html|hbs)$"
        },
        {
            "id": "forbid-non-std-html-attributes",
            "name": "Non-standard HTML attributes checker",
            "description": "Detect any non-standard attribute that is not prefixed with data-",
            "entry": "forbid_non_std_html_attributes",
            "language": "python",
            "args": [
                "--extra-known-attributes",
                "content,http-equiv,placeholder,role,style"
            ],
            "files": ".*\\.(html|hbs)$"
        },
        {
            "id": "detect-missing-css-classes",
            "name": "Missing CSS classes checker",
            "description": "Detect unused or missing CSS classes definitions, and abort if any of the later ones is found",
            "entry": "detect_missing_css_classes",
            "language": "python",
            "files": ".*\\.(css|hbs|html)$"
        },
        {
            "id": "html-tags-blacklist",
            "name": "Forbid some HTML tags",
            "entry": "html_tags_blacklist",
            "language": "python",
            "args": [
                "--forbidden-tags",
                "basefont,blink,center,font,marquee,s,strike,tt,u"
            ],
            "files": "\\.(html|hbs)$"
        },
        {
            "id": "html-attributes-blacklist",
            "name": "Forbid some HTML attributes",
            "entry": "html_attributes_blacklist",
            "language": "python",
            "args": [
                "--forbidden-attributes",
                "align,alink,background,basefont,bgcolor,border,color,link,text,vlink"
            ],
            "files": "\\.(html|hbs)$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-markup": [
        {
            "id": "rst-linter",
            "name": "Check .rst files with the same linter used by pypi.org",
            "entry": "rst_linter",
            "language": "python",
            "files": "\\.rst$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-nodejs": [
        {
            "id": "htmlhint",
            "name": "NodeJS HTML syntax linter (htmlhint)",
            "entry": "htmlhint",
            "language": "node",
            "files": ".*\\.(html|hbs)$",
            "additional_dependencies": [
                "htmlhint"
            ]
        },
        {
            "id": "htmllint",
            "name": "NodeJS HTML syntax linter (htmllint)",
            "entry": "htmllint",
            "language": "node",
            "files": ".*\\.(html|hbs)$",
            "additional_dependencies": [
                "htmllint-cli"
            ]
        },
        {
            "id": "dockerfile_lint",
            "name": "Dockerfile linter",
            "entry": "dockerfile_lint",
            "args": [
                "-f"
            ],
            "language": "node",
            "additional_dependencies": [
                "dockerfile_lint"
            ],
            "files": "Dockerfile.*"
        },
        {
            "id": "markdown-toc",
            "name": "Insert a table of contents in Markdown files, like a README.md",
            "entry": "markdown-toc",
            "args": [
                "-i"
            ],
            "language": "node",
            "additional_dependencies": [
                "markdown-toc"
            ],
            "files": "^README.md$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-safety": [
        {
            "id": "python-safety-dependencies-check",
            "name": "safety",
            "description": "Analyze your Python requirements for known security vulnerabilities",
            "entry": "safety_check",
            "language": "python",
            "files": "requirements"
        }
    ],
    "https://bitbucket.org/SamWhited/go-pre-commit.git": [
        {
            "id": "gofmt",
            "name": "Go Format",
            "description": "Formats Go code.",
            "entry": "gofmthook.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "gofix",
            "name": "Go Fix",
            "description": "Updates old Go APIs to the latest version.",
            "entry": "go fix",
            "language": "system",
            "files": "\\.go$"
        },
        {
            "id": "govet",
            "name": "Go Vet",
            "description": "Vets Go code for mistakes not caught by the compiler.",
            "entry": "go vet",
            "language": "system",
            "files": "\\.go$"
        },
        {
            "id": "gobuild",
            "name": "Go Build",
            "description": "Makes sure Go code can build.",
            "entry": "go build",
            "language": "system",
            "files": "\\.go$"
        },
        {
            "id": "gotest",
            "name": "Go Test",
            "description": "Runs tests against Go code.",
            "entry": "go test",
            "language": "system",
            "files": "\\.go$"
        }
    ],
    "https://github.com/chriskuehl/puppet-pre-commit-hooks": [
        {
            "id": "puppet-validate",
            "name": "Validate Puppet manifests",
            "description": "Validate syntax of Puppet manifests",
            "entry": "puppet-validate",
            "language": "ruby",
            "files": "\\.pp$",
            "additional_dependencies": [
                "puppet"
            ]
        },
        {
            "id": "erb-validate",
            "name": "Validate ERB templates",
            "description": "Validate syntax of Ruby ERB templates",
            "entry": "erb-validate",
            "language": "ruby",
            "files": "\\.erb$"
        },
        {
            "id": "epp-validate",
            "name": "Validate EPP templates",
            "description": "Validate syntax of Puppet EPP templates",
            "entry": "epp-validate",
            "language": "ruby",
            "files": "\\.epp$",
            "additional_dependencies": [
                "puppet"
            ]
        },
        {
            "id": "puppet-lint",
            "name": "puppet-lint",
            "description": "Check Puppet manifests for stylistic problems",
            "entry": "puppet-lint",
            "language": "ruby",
            "files": "\\.pp$",
            "additional_dependencies": [
                "puppet-lint"
            ]
        }
    ],
    "https://github.com/dnephin/pre-commit-golang": [
        {
            "id": "go-fmt",
            "name": "go fmt",
            "entry": "run-go-fmt.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gofmt`, requires golang"
        },
        {
            "id": "go-vet",
            "name": "go vet",
            "entry": "run-go-vet.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go vet`, requires golang"
        },
        {
            "id": "go-lint",
            "name": "go lint",
            "entry": "run-go-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golint`, requires https://github.com/golang/lint"
        },
        {
            "id": "validate-toml",
            "name": "validate toml",
            "entry": "tomlv",
            "files": "\\.toml$",
            "language": "system",
            "description": "Runs `tomlv`, requires https://github.com/BurntSushi/toml/tree/master/cmd/tomlv\"\n"
        },
        {
            "id": "no-go-testing",
            "name": "Check files aren't using gos' testing package",
            "entry": "testing\\.T",
            "files": "test_.*\\.go$",
            "language": "pygrep",
            "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n"
        },
        {
            "id": "gometalinter",
            "name": "gometalinter",
            "entry": "run-gometalinter.sh",
            "files": "\\.go$",
            "language": "script",
            "description": ""
        }
    ],
    "https://github.com/troian/pre-commit-golang": [
        {
            "id": "go-fmt",
            "name": "go fmt",
            "entry": "run-go-fmt.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gofmt`, requires golang"
        },
        {
            "id": "go-imports",
            "name": "go imports",
            "entry": "run-goimports.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `goimports`, requires golang"
        },
        {
            "id": "go-vet",
            "name": "go vet",
            "entry": "run-go-vet.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go vet`, requires golang"
        },
        {
            "id": "go-lint",
            "name": "go lint",
            "entry": "run-go-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golint`, requires https://github.com/golang/lint"
        },
        {
            "id": "go-metalinter",
            "name": "go metalinter",
            "entry": "run-go-metalinter.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gometalinter`, requires https://github.com/alecthomas/gometalinter"
        },
        {
            "id": "go-build",
            "name": "go build",
            "description": "Makes sure Go code can build",
            "entry": "run-go-build.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-build-plugin",
            "name": "go build plugin",
            "description": "Makes sure Go code can build package as plugin",
            "entry": "run-go-build-plugin.sh",
            "language": "script",
            "files": "\\.go$"
        }
    ],
    "https://github.com/jstewmon/check-swagger": [
        {
            "id": "check-swagger",
            "name": "check-swagger",
            "entry": "check-swagger",
            "description": "Hook to validate swagger specs.",
            "language": "python",
            "files": ".*swagger.*\\.(json|yaml|yml)"
        }
    ],
    "https://github.com/detailyang/pre-commit-shell": [
        {
            "id": "shell-lint",
            "name": "Shell Syntax Check",
            "description": "Check Shell Syntax on ALL staged files with user friendly messages and colors",
            "entry": "pre_commit_hooks/shell-lint.sh",
            "language": "script",
            "files": "(\\.sh|\\.zsh|\\.ksh)$"
        }
    ],
    "https://github.com/bemeurer/beautysh": [
        {
            "id": "beautysh",
            "name": "beautysh",
            "description": "A Bash beautifier for the masses.\nhttps://pypi.python.org/pypi/beautysh\n",
            "entry": "beautysh -f",
            "language": "python",
            "types": [
                "shell"
            ]
        }
    ],
    "https://github.com/antonbabenko/pre-commit-terraform": [
        {
            "id": "terraform_fmt",
            "name": "Terraform fmt",
            "description": "Rewrites all Terraform configuration files to a canonical format.",
            "entry": "terraform_fmt.sh",
            "language": "script",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_docs",
            "name": "Terraform docs",
            "description": "Inserts input and output documentation into README.md (using terraform-docs).",
            "entry": "terraform_docs.sh",
            "language": "script",
            "files": "(\\.tf)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_validate_no_variables",
            "name": "Terraform validate without variables",
            "description": "Validates all Terraform configuration files without checking whether all required variables were set (basic check).",
            "entry": "terraform_validate_no_variables.sh",
            "language": "script",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_validate_with_variables",
            "name": "Terraform validate with variables",
            "description": "Validates all Terraform configuration files and checks whether all required variables were specified.",
            "entry": "terraform_validate_with_variables.sh",
            "language": "script",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform\\/.*$"
        }
    ],
    "https://github.com/willthames/ansible-lint": [
        {
            "id": "ansible-lint",
            "name": "Ansible-lint",
            "description": "This hook runs ansible-lint.",
            "entry": "ansible-lint",
            "language": "python",
            "files": "\\.(yaml|yml)$"
        }
    ],
    "https://github.com/doublify/pre-commit-clang-format": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "description": "Format files with ClangFormat.",
            "entry": "clang-format",
            "language": "system",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx|java|js|m|proto)$",
            "args": [
                "-fallback-style=Google",
                "-i"
            ]
        }
    ],
    "https://github.com/doublify/pre-commit-go": [
        {
            "id": "fmt",
            "name": "fmt",
            "description": "Format files with go fmt.",
            "entry": "fmt.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "vet",
            "name": "vet",
            "description": "Check files with go vet.",
            "entry": "vet.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "fix",
            "name": "fix",
            "description": "Fix files with go fix.",
            "entry": "go fix",
            "language": "system",
            "files": "\\.go$"
        }
    ],
    "https://github.com/doublify/pre-commit-hindent": [
        {
            "id": "hindent",
            "name": "hindent",
            "description": "Format files with hindent.",
            "entry": "hindent.sh",
            "language": "script",
            "files": "\\.(hs|lhs)$"
        }
    ],
    "https://github.com/doublify/pre-commit-isort": [
        {
            "id": "isort",
            "name": "isort",
            "description": "Sort imports alphabetically with isort.",
            "entry": "isort",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/doublify/pre-commit-rust": [
        {
            "id": "fmt",
            "name": "fmt",
            "description": "Format files with rustfmt.",
            "entry": "cargo fmt --",
            "language": "system",
            "files": "\\.rs$",
            "args": [
                "--write-mode=overwrite"
            ]
        }
    ],
    "https://github.com/chewse/pre-commit-mirrors-pydocstyle": [
        {
            "id": "pydocstyle",
            "name": "Verifying PEP257 Compliance",
            "entry": "pydocstyle",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/kintoandar/pre-commit": [
        {
            "id": "terraform_fmt",
            "name": "terraform_fmt",
            "description": "Formats terraform scripts into the correct checkstyle",
            "entry": "bin/tf_fmt.sh",
            "language": "script",
            "files": "\\.tf$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_validate",
            "name": "terraform_validate",
            "description": "Validates terraform scripts syntax",
            "entry": "bin/tf_validate.sh",
            "language": "script",
            "files": "\\.tf$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "prometheus_check_rules",
            "name": "prometheus_check_rules",
            "description": "Validates prometheus rules",
            "entry": "bin/prom_rules.sh",
            "language": "script",
            "files": "\\.rules$"
        },
        {
            "id": "prometheus_check_config",
            "name": "prometheus_check_config",
            "description": "Validates prometheus configuration",
            "entry": "bin/prom_config.sh",
            "language": "script",
            "files": "prometheus.yml$"
        }
    ],
    "https://github.com/awebdeveloper/pre-commit-stylelint": [
        {
            "id": "stylelint",
            "name": "stylelint",
            "entry": "stylelint",
            "language": "node",
            "files": "\\.(css|scss|sass)$",
            "args": [],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/awebdeveloper/pre-commit-tslint": [
        {
            "id": "tslint",
            "name": "tslint",
            "entry": "tslint",
            "language": "node",
            "files": "\\.(ts)$",
            "args": [],
            "minimum_pre_commit_version": "0.12.0"
        }
    ],
    "https://github.com/awebdeveloper/pre-commit-prettier": [
        {
            "id": "prettier",
            "name": "prettier",
            "entry": "prettier",
            "language": "node",
            "files": "\\.(js)$",
            "args": [
                "--write"
            ],
            "minimum_pre_commit_version": "0.12.0"
        }
    ],
    "https://github.com/prettier/prettier": [
        {
            "id": "prettier",
            "name": "prettier",
            "entry": "prettier --write",
            "language": "node",
            "files": "\\.(css|less|scss|html|ts|tsx|graphql|gql|json|js|jsx|md)$"
        }
    ],
    "https://github.com/adrienverge/yamllint": [
        {
            "id": "yamllint",
            "name": "yamllint",
            "description": "This hook runs yamllint.",
            "entry": "yamllint",
            "language": "python",
            "types": [
                "file",
                "yaml"
            ]
        }
    ],
    "https://github.com/thlorenz/doctoc": [
        {
            "id": "doctoc",
            "name": "doctoc",
            "language": "node",
            "entry": "doctoc",
            "types": [
                "markdown"
            ]
        }
    ],
    "https://github.com/noahsark769/xcodeproj-sort-pre-commit-hook": [
        {
            "id": "xcodeproj-sort",
            "name": "Sort the xcode project file",
            "description": "This hook sorts your .xcodeproj file",
            "entry": "xcodeproj-sort",
            "language": "ruby",
            "files": ".*\\.pbxproj"
        }
    ],
    "https://github.com/jorisroovers/gitlint": [
        {
            "id": "gitlint",
            "name": "gitlint",
            "entry": "gitlint --msg-filename",
            "language": "python"
        }
    ],
    "https://github.com/ambv/black": [
        {
            "id": "black",
            "name": "black",
            "description": "Black: The uncompromising Python code formatter",
            "entry": "black",
            "language": "python",
            "language_version": "python3.6",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/IamTheFij/ansible-pre-commit": [
        {
            "id": "encryption-check",
            "name": "Ansible Vault Encryption Check",
            "description": "Checks that vault files are encrypted",
            "entry": "encryption-check.sh",
            "files": "((^|/)vault|vault.y[a]{0,1}ml$|.vault$)",
            "language": "script"
        }
    ],
    "https://github.com/IamTheFij/docker-pre-commit": [
        {
            "id": "docker-compose-check",
            "name": "Validate docker-compose files",
            "description": "Checks that vault files are encrypted",
            "entry": "compose-check.sh",
            "files": "docker-compose.y[a]{0,1}ml$",
            "language": "script"
        }
    ]
}